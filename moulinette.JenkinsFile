    pipeline {
        agent any
        parameters {
            string(name: 'GITHUB_REPO', description: 'The GitHub repository URL to clone')
        }

        stages {
            stage('Extract Folder Name') {
                steps {
                    script {
                        def repoUrl = params.GITHUB_REPO
                        def folderName = repoUrl.split('/').last().replaceAll('.git$', '')
                        echo "Derived folder name: ${folderName}"
                        env.REPO_FOLDER = folderName
                    }
                }
            }

            stage('Clone Repository') {
                steps {
                    script {
                        sh """
                        if [ -d "${env.REPO_FOLDER}" ]; then
                            echo "The folder '${env.REPO_FOLDER}' already exists. Skipping clone."
                            cd "${env.REPO_FOLDER}"
                            git pull
                        else
                            git clone "${params.GITHUB_REPO}" "${env.REPO_FOLDER}"
                        fi
                        """
                    }
                }
            }

            stage('Build') {
                steps {
                    script {
                        sh """
                        cd "${env.REPO_FOLDER}"
                        echo "Current directory: \$(pwd)"

                        make re
                        """
                    }
                }
            }
            stage('Tests') {
                steps {
                    script {
                        sh """
                        cd "${env.REPO_FOLDER}"
                        make tests
                        TEST_OUTPUT=\$?  # Capture the exit code of 'make tests'

                        if [ \$TEST_OUTPUT -ne 0 ]; then
                            echo "Tests failed"
                            exit 1  # Fail the pipeline if tests fail
                        else
                            echo "Tests passed successfully!"
                        fi
                        """
                    }
                }
            }
        }
    }
